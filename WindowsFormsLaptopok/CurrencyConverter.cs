// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using WindowsFormsLaptopok;
//
//    var currencyConverter = CurrencyConverter.FromJson(jsonString);

namespace WindowsFormsLaptopok
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class CurrencyConverter
    {
        [JsonProperty("result")]
        public string Result { get; set; }

        [JsonProperty("documentation")]
        public Uri Documentation { get; set; }

        [JsonProperty("terms_of_use")]
        public Uri TermsOfUse { get; set; }

        [JsonProperty("time_last_update_unix")]
        public long TimeLastUpdateUnix { get; set; }

        [JsonProperty("time_last_update_utc")]
        public string TimeLastUpdateUtc { get; set; }

        [JsonProperty("time_next_update_unix")]
        public long TimeNextUpdateUnix { get; set; }

        [JsonProperty("time_next_update_utc")]
        public string TimeNextUpdateUtc { get; set; }

        [JsonProperty("base_code")]
        public string BaseCode { get; set; } = "EUR";

        [JsonProperty("conversion_rates")]
        public Dictionary<string, double> ConversionRates { get; set; }
    }

    public partial class CurrencyConverter
    {
        public static CurrencyConverter FromJson(string json) => JsonConvert.DeserializeObject<CurrencyConverter>(json, WindowsFormsLaptopok.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this CurrencyConverter self) => JsonConvert.SerializeObject(self, WindowsFormsLaptopok.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
